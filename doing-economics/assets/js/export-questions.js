/* jslint browser */
/*globals window, alert, Blob */

// This script turns a table of questions
// into an object, and a downloadable CSV file

// Set up the data object, with a header row
var outputData = [
    {
        unit: 'Unit',
        questionNumber: 'Number',
        questionType: 'Solution type',
        questionText: 'Question',
        option1: 'Option 1',
        option1correct: 'Solution 1',
        option2: 'Option 2',
        option2correct: 'Solution 2',
        option3: 'Option 3',
        option3correct: 'Solution 3',
        option4: 'Option 4',
        option4correct: 'Solution 4',
        feedback1: 'Feedback 1',
        feedback2: 'Feedback 2',
        feedback3: 'Feedback 3',
        feedback4: 'Feedback 4',
        images: 'Images'
    }
];

// Get all the questions generated by
// our table-of-questions include
var questionRows = document.querySelectorAll('.table-of-questions > tbody > tr');

// Make the button trigger the download
function toqDownloadCSV(csv) {
    'use strict';

    // Thanks https://stackoverflow.com/a/32295448/1781075
    var button = document.getElementById('toq-save-as-csv');
    var blob = new Blob([csv], {type: 'text/csv'});
    var url = window.URL.createObjectURL(blob);
    button.href = url;
    button.target = '_blank';
    button.download = 'questions.csv';
}

// Add a download button (once the data is available).
// Then listen for clicks on it. When clicked,
// trigger toqDownloadCSV(csv).
function toqShowDownloadButton(csv) {
    'use strict';
    var outputDataDiv = document.querySelector('.table-of-questions-data');
    var downloadButton = document.createElement('a');
    downloadButton.innerHTML = 'Save as CSV';
    downloadButton.classList.add('button');
    downloadButton.id = 'toq-save-as-csv';
    outputDataDiv.insertAdjacentElement('beforebegin', downloadButton);
    downloadButton.addEventListener('click', toqDownloadCSV(csv));

    // Excel is a menace, so let's offer some help
    var toqExcelTipText = 'This CSV file is encoded as UTF-8. ' +
            'Excel will get that wrong by default. ' +
            'To open in Excel:\n\n' +
            '1. Save this CSV file to your computer.\n' +
            '2. Open a blank Excel sheet.\n' +
            '3. Go to Data > Get Data > From File > From Text/CSV.\n' +
            '4. Choose the file you just downloaded and click "Import".\n' +
            '5. In the dialog that opens, at File Origin, select "65001: Unicode (UTF-8)".\n' +
            '6. Check that "Delimiter" is "Comma".\n' +
            '7. Click "Load".';
    var toqExcelTip = document.createElement('a');
    toqExcelTip.innerHTML = "Using Excel?";
    toqExcelTip.classList.add('toq-excel-tip');
    downloadButton.insertAdjacentElement('afterend', toqExcelTip);
    toqExcelTip.addEventListener('click', function () {
        alert(toqExcelTipText);
    });
}

// Turn the data into CSV.
// Then toqShowDownloadButton(csv).
function toqCreateCSV(dataObjectArray) {
    'use strict';
    var csv = ''; // the empty CSV
    var question; // question object

    // A function for writing an entry, which
    // we'll use in a sec in a forEach loop
    function toqWriteCSVEntry(pair) {
        csv += '"' + pair[1] + '",';
    }

    // loop through each question
    for (question = 0; question < dataObjectArray.length; question += 1) {

        // loop through each value in the question
        Object.entries(dataObjectArray[question]).forEach(toqWriteCSVEntry);

        // end the question with a line break
        csv += '\r\n';
    }

    // Now that the data is ready,
    // show the download button
    toqShowDownloadButton(csv);
}

// Look through each question and save its values
// into the outputData Javascript object.
// Returns outputData.
function toqData(questionRows) {
    'use strict';
    questionRows.forEach(function (questionRow) {

        // Get the consituent parts of each question
        var questionCorrectOptions = questionRow.querySelector('td.question-correct-options').innerText;
        var questionCorrectOptionsArray = questionCorrectOptions.replace(" ", "").split(",");
        var heading = questionRow.querySelector('h3, h4').innerText;
        var unit = Number(heading.match(/\d+/));
        var questionNumberInBookAsObject = heading.match(/\d+\.\d+/);
        var questionNumberInBook = JSON.stringify(questionNumberInBookAsObject);
        var questionNumberInUnitArray = questionNumberInBook.split('.');
        var questionNumberInUnit = Number(questionNumberInUnitArray[questionNumberInUnitArray.length - 1].match(/\d+/));

        // Get just the text of the question
        var questionText = '';
        var questionTextArray = Array.prototype.slice.call(questionRow.querySelectorAll('.question-content'));
        questionTextArray.forEach(function (questionTextArrayItem) {
            questionTextArrayItem.childNodes.forEach(function (child) {
                // if this is a text node
                if (child.nodeType === 3) {
                    questionText = questionText + child.textContent;
                } else {
                    if (child.tagName === 'H3' || child.classList.contains('mcq-options') || child.classList.contains('mcq-feedback')) {
                        questionTextArrayItem.removeChild(child);
                    } else {
                        questionText = questionText + child.innerText;
                    }
                }
            });
        });

        // Check if the question has one or multiple answers
        var questionType = 'Single';
        if (questionCorrectOptionsArray.length > 1) {
            questionType = "Multiple";
        }

        // Set values for options and feedback
        var option1 = questionRow.querySelector('.mcq-options').children[0].innerText;
        var option2 = questionRow.querySelector('.mcq-options').children[1].innerText;
        var option3 = questionRow.querySelector('.mcq-options').children[2].innerText;
        var option4 = questionRow.querySelector('.mcq-options').children[3].innerText;
        var feedback1 = questionRow.querySelector('.mcq-feedback').children[0].innerText;
        var feedback2 = questionRow.querySelector('.mcq-feedback').children[1].innerText;
        var feedback3 = questionRow.querySelector('.mcq-feedback').children[2].innerText;
        var feedback4 = questionRow.querySelector('.mcq-feedback').children[3].innerText;

        // Get the paths to images
        var images = questionRow.querySelectorAll('.question-content img');

        // Create an array of images
        var imageSource = document.querySelector('[data-question-images-source]').getAttribute('data-question-images-source') + '/book/images/web/';
        var imagePathsArray = [];
        images.forEach(function (image) {

            // the browser returns the live image.src relative to the page,
            // not what's in the DOM. So we have to rebuild the path manually
            var imageLocalFile = JSON.stringify(image.src).match(/http.+[(jpg)(png)(svg)]/);
            if (imageLocalFile) {
                var imageFile = String(imageLocalFile).replace(/http.+\//, '');
                var imagePath = imageSource + imageFile;
                imagePathsArray.push(imagePath);
            }
        });

        // Turn array into list for output
        var imageList = '';
        imagePathsArray.forEach(function (imagePath, index) {
            imageList += imagePath;
            // add a comma if this isn't the last image
            if (index !== imagePathsArray.length - 1) {
                imageList += ", ";
            }
        });

        // Check if each option is correct
        var option1correct = 0;
        var option2correct = 0;
        var option3correct = 0;
        var option4correct = 0;
        if (questionCorrectOptionsArray.includes('1')) {
            option1correct = 1;
        }
        if (questionCorrectOptionsArray.includes('2')) {
            option2correct = 1;
        }
        if (questionCorrectOptionsArray.includes('3')) {
            option3correct = 1;
        }
        if (questionCorrectOptionsArray.includes('4')) {
            option4correct = 1;
        }

        // Save all that to the outputData object
        outputData.push({
            unit: unit,
            questionNumber: questionNumberInUnit,
            questionType: questionType,
            questionText: questionText,
            option1: option1,
            option1correct: option1correct,
            option2: option2,
            option2correct: option2correct,
            option3: option3,
            option3correct: option3correct,
            option4: option4,
            option4correct: option4correct,
            feedback1: feedback1,
            feedback2: feedback2,
            feedback3: feedback3,
            feedback4: feedback4,
            images: imageList
        });
    });

    // Return the data object
    return outputData;
}

// Create the CSV export from the outputData
toqCreateCSV(toqData(questionRows));
